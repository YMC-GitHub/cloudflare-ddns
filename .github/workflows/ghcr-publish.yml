name: Build, Push and Release

on:
  push:
    tags:
      - 'v*'  # Êé®ÈÄÅ v ÂºÄÂ§¥ÁöÑÊ†áÁ≠æÊó∂Ëß¶Âèë
  workflow_dispatch:  # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë
    inputs:
      use_china_mirror:
        description: 'Use China mirror for faster downloads (for China-based runners)'
        required: false
        default: false
        type: boolean
      alpine_mirror:
        description: 'Alpine Linux mirror'
        required: false
        default: 'mirrors.aliyun.com'
        type: choice
        options:
          - mirrors.aliyun.com
          - mirrors.tuna.tsinghua.edu.cn
          - mirrors.ustc.edu.cn
      rust_mirror:
        description: 'Rust Crates mirror'
        required: false
        default: 'tuna'
        type: choice
        options:
          - tuna
          - ustc

env:
  REGISTRY: ghcr.io
  IMAGE_NAME:  ${{ toLower(github.repository) }}
  BINARY_NAME: ${{ github.event.repository.name }}

jobs:
  build-and-push:
    name: Build Static Binary and Push to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=scratch,enable=true
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,prefix=git-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64  # Âè™ÊûÑÂª∫ amd64 Âπ≥Âè∞
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: runtime
          build-args: |
            USE_CHINA_MIRROR=${{ inputs.use_china_mirror }}
            ALPINE_MIRROR=${{ inputs.alpine_mirror }}
            RUST_MIRROR=${{ inputs.rust_mirror }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract binary from Docker image
        id: extract-binary
        run: |
          # ÂàõÂª∫‰∏¥Êó∂ÁõÆÂΩï
          mkdir -p release-binaries
          
          # ‰ªéÂàöÊûÑÂª∫ÁöÑÈïúÂÉè‰∏≠ÊèêÂèñ‰∫åËøõÂà∂Êñá‰ª∂
          docker create --name extract-binary-container ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }}
          docker cp extract-binary-container:/usr/local/bin/${{ env.BINARY_NAME }} release-binaries/${{ env.BINARY_NAME }}
          docker rm -f extract-binary-container
          
          # ‰Ωø‰∫åËøõÂà∂Êñá‰ª∂ÂèØÊâßË°å
          chmod +x release-binaries/${{ env.BINARY_NAME }}
          
          # Ëé∑Âèñ‰∫åËøõÂà∂Êñá‰ª∂‰ø°ÊÅØ
          echo "binary_size=$(du -h release-binaries/${{ env.BINARY_NAME }} | cut -f1)" >> $GITHUB_OUTPUT
          echo "binary_path=release-binaries/${{ env.BINARY_NAME }}" >> $GITHUB_OUTPUT
          
          # ÊòæÁ§∫Êñá‰ª∂‰ø°ÊÅØ
          file release-binaries/${{ env.BINARY_NAME }}
          ls -la release-binaries/${{ env.BINARY_NAME }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-binary
          path: release-binaries/${{ env.BINARY_NAME }}
          retention-days: 1

      - name: Build completion report
        run: |
          echo "üéâ Build Completed Successfully"
          echo "==============================="
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"
          echo "üèóÔ∏è  Architecture: x86_64 (amd64)"
          echo "üìê Platform: linux/amd64"
          echo "üîß Build Type: Static musl binary on scratch"
          echo "üì¶ Binary: ${{ steps.extract-binary.outputs.binary_path }} (${{ steps.extract-binary.outputs.binary_size }})"
          echo "üåê China Mirror: ${{ inputs.use_china_mirror }}"
          echo "üì° Alpine Mirror: ${{ inputs.alpine_mirror }}"
          echo "‚öôÔ∏è  Rust Mirror: ${{ inputs.rust_mirror }}"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-binary
          path: release-binaries

      - name: Create checksums
        run: |
          cd release-binaries
          sha256sum ${{ env.BINARY_NAME }} > ${{ env.BINARY_NAME }}.sha256
          sha512sum ${{ env.BINARY_NAME }} > ${{ env.BINARY_NAME }}.sha512
          echo "Checksums created:"
          cat ${{ env.BINARY_NAME }}.sha256
          cat ${{ env.BINARY_NAME }}.sha512

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-binaries/${{ env.BINARY_NAME }}
            release-binaries/${{ env.BINARY_NAME }}.sha256
            release-binaries/${{ env.BINARY_NAME }}.sha512
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, '-alpha') || contains(github.ref, '-beta') || contains(github.ref, '-rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release completion report
        run: |
          echo "üöÄ Release Published Successfully"
          echo "================================"
          echo "üì¶ Binary: ${{ env.BINARY_NAME }}"
          echo "üìÅ Files uploaded:"
          echo "  - ${{ env.BINARY_NAME }} (executable)"
          echo "  - ${{ env.BINARY_NAME }}.sha256 (SHA256 checksum)"
          echo "  - ${{ env.BINARY_NAME }}.sha512 (SHA512 checksum)"
          echo "üè∑Ô∏è  Tag: ${GITHUB_REF#refs/tags/}"